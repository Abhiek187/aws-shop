AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
#Globals
Description: >-
  A stack to build the serverless backend of the AWS Shopping App
#Metadata
Parameters:
  Email:
    Type: String
    Description: The email address that will receive SNS notifications for the health check alarm
    # Simple regex from https://stackoverflow.com/a/201378
    AllowedPattern: "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
#Rules
Mappings:
  CloudFront:
    # Managed origin request policies: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html
    OriginRequestPolicies:
      AllViewer: 216adef6-5c7f-47e4-b989-5492eafa07d3
      AllViewerAndCloudFrontHeaders202206: 33f36d7e-f396-46d9-90e0-52428a34d9dc
      AllViewerExceptHostHeader: b689b0a8-53d0-40ab-baf2-68738e2966ac
      CORSCustomOrigin: 59781a5b-3903-41f3-afcb-af62929ccde1
      CORSS3Origin: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
      ElementalMediaTailorPersonalizedManifests: 775133bc-15f2-49f9-abea-afb2e0bf67d2
      UserAgentRefererHeaders: acba4595-bd28-49b8-b9fe-13317c0390fa
    # Managed response policies: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-response-headers-policies.html
    ResponseHeadersPolicies:
      CORSAndSecurityHeadersPolicy: e61eb60c-9c35-4d20-a928-2b84e02af89c
      CORSWithPreflight: 5cc3b908-e619-4b99-88e5-2cf7f45965bd
      CORSWithPreflightAndSecurityHeadersPolicy: eaab4381-ed33-4a86-88ca-d9558dc6cd63
      SecurityHeadersPolicy: 67f7725c-6f97-4210-82d7-5512b31e9d03
      SimpleCORS: 60669652-455b-4ae9-85a4-c4c02393f86c
#Conditions
Resources:
  # CloudFront
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
            Id: StoreAPIOrigin
            CustomOriginConfig:
              # Keep TCP connections alive for 5s, timeout after 30s
              OriginProtocolPolicy: https-only
        Enabled: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: StoreAPIOrigin
          Compress: true
          CachePolicyId: !Ref CloudFrontCachePolicy
          OriginRequestPolicyId:
            !FindInMap [
              CloudFront,
              OriginRequestPolicies,
              AllViewerExceptHostHeader,
            ]
          ViewerProtocolPolicy: redirect-to-https
          # Add the necessary security & CORS headers to call from the front end
          ResponseHeadersPolicyId:
            !FindInMap [
              CloudFront,
              ResponseHeadersPolicies,
              CORSWithPreflightAndSecurityHeadersPolicy,
            ]
        PriceClass: PriceClass_100 # only use edge locations in North America, Europe, and Israel
        # Logging:
        #   Bucket: !GetAtt CloudFrontLoggingBucket.DomainName
        #   IncludeCookies: false
  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        MinTTL: 1
        DefaultTTL: 86400 # 1 day
        MaxTTL: 31536000 # 1 year
        Name: StoreMicroserviceCachePolicy
        ParametersInCacheKeyAndForwardedToOrigin:
          # Create separate cache keys for different query strings
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
              - Origin
          QueryStringsConfig:
            QueryStringBehavior: all
  # Route 53
  HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        # 3 health checks every 30s by default
        # Optional features: HTTPS, STR_MATCH, RequestInterval < 30, MeasureLatency
        Type: HTTP
        FullyQualifiedDomainName: !GetAtt CloudFrontDistribution.DomainName
        Port: 80
        ResourcePath: /health
  # CloudWatch
  HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Check the health of the store API and send an email whenever it's unhealthy
      # In Route 53, monitor the health check status in the past 5 minutes (either 0 or 1).
      # If this unitless value is < 1 at any point, transition to an ALARM state.
      # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html
      Namespace: AWS/Route53
      MetricName: HealthCheckStatus
      Dimensions:
        - Name: HealthCheckId
          Value: !Ref HealthCheck
      Period: 300 # 5 minutes
      EvaluationPeriods: 1
      Statistic: Minimum
      ComparisonOperator: LessThanThreshold
      Threshold: 1
      Unit: None
      AlarmActions:
        - !Ref SNSTopic
  # SNS
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      # Encrypt using the default SNS SSE key
      # Key aliases: aws kms list-aliases
      KmsMasterKeyId: alias/aws/sns
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action: sns:Publish
            Resource: !Ref SNSTopic
            Condition:
              Bool:
                "aws:SecureTransport": false
      Topics:
        - !Ref SNSTopic
  # API Gateway
  HttpApi:
    # Creates AWS::ApiGatewayV2::Stage/Api
    # API Gateway v1 = REST, v2 = HTTP/WebSocket
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        # $context variables: https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-logging-variables.html
        Format: >-
          { "requestId":"$context.requestId", "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod",
          "routeKey":"$context.routeKey", "status":"$context.status",
          "protocol":"$context.protocol", "responseLength":"$context.responseLength" }
      DefaultRouteSettings:
        ThrottlingBurstLimit: 100 # max # of concurrent requests
        ThrottlingRateLimit: 100 # max # of requests/sec
      DefinitionUri: openapi.yaml # OpenAPI file URI
      #FailOnWarnings: true
  AccessLogs:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Metadata:
      guard:
        SuppressedRules:
          - CLOUDWATCH_LOG_GROUP_ENCRYPTED # server-side encryption is used by default
    Properties:
      LogGroupName: store-api
      RetentionInDays: 365
  # SQS
  LambdaDLQ:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 5
      SqsManagedSseEnabled: true
  # Lambda
  LambdaFunction:
    # Creates AWS::Lambda::Permission/Function, AWS::IAM::Role
    Type: AWS::Serverless::Function
    Metadata:
      guard:
        SuppressedRules:
          # Reliability suppressions
          - LAMBDA_CONCURRENCY_CHECK # save costs
          - LAMBDA_INSIDE_VPC # no VPC created (also security check)
          # Security suppressions
          - IAM_NO_INLINE_POLICY_CHECK # SAM policy templates become inline policies
    Properties:
      # Zip files run faster than container images (setting PackageType causes false drift)
      CodeUri: src/
      Handler: app.handler
      Runtime: python3.11 # see https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html
      Architectures:
        - arm64
      Description: Query the AWS Services table
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
      FunctionName: aws-service-handler
      Policies:
        # SAM policy templates:
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBReadPolicy:
            TableName: !Ref AWSServiceTable
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PartiQLSelect
              Resource:
                - !Sub
                  - "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}"
                  - tableName: !Ref AWSServiceTable
                - !Sub
                  - "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*"
                  - tableName: !Ref AWSServiceTable
      # Can use function URLs if API Gateway isn't necessary
      # 128 MB of memory allocated by default
      # Automatically update the runtime version
      # Timeout after 3 seconds
      Tracing: Active
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDLQ.Arn # automatically applies permissions to the execution role
        Type: SQS
  # DynamoDB
  AWSServiceTable:
    # SAM version is limited
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        # Only need to list the sort and partition keys
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Name
          AttributeType: S
        - AttributeName: Price
          AttributeType: N
        - AttributeName: Category
          AttributeType: S
      BillingMode: PAY_PER_REQUEST # on-demand mode
      # GSIs are preferred over LSIs (unless strong consistency is required)
      # Query by category where price can be in range
      GlobalSecondaryIndexes:
        - IndexName: PriceIndex
          KeySchema:
            - AttributeName: Category
              KeyType: HASH # HASH = partition key, RANGE = sort key
            - AttributeName: Price
              KeyType: RANGE
          Projection:
            ProjectionType: ALL # project all keys to the index
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: Name
          KeyType: RANGE
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        # Back up the table every second for 35 days (only charged based on table+index size)
        PointInTimeRecoveryEnabled: true
      TableClass: STANDARD
      TableName: AWS-Services
Outputs:
  CloudFrontURL:
    Description: CloudFront URL of the API
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
  HttpApiUrl:
    Description: URL of the API endpoint
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
  LambdaDLQURL:
    Description: DLQ URL for Lambda
    Value: !Ref LambdaDLQ
