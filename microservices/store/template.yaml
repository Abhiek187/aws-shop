AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
#Globals
Description: >-
  A stack to build the serverless backend of the AWS Shopping App
#Metadata
#Parameters
#Rules
Mappings:
  CloudFront:
    # Managed response policies: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-response-headers-policies.html
    ResponseHeadersPolicies:
      CORSAndSecurityHeadersPolicy: e61eb60c-9c35-4d20-a928-2b84e02af89c
      CORSWithPreflight: 5cc3b908-e619-4b99-88e5-2cf7f45965bd
      CORSWithPreflightAndSecurityHeadersPolicy: eaab4381-ed33-4a86-88ca-d9558dc6cd63
      SecurityHeadersPolicy: 67f7725c-6f97-4210-82d7-5512b31e9d03
      SimpleCORS: 60669652-455b-4ae9-85a4-c4c02393f86c
#Conditions
Resources:
  # CloudFront
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
            Id: StoreAPIOrigin
            CustomOriginConfig:
              # Keep TCP connections alive for 5s, timeout after 30s
              OriginProtocolPolicy: https-only
        Enabled: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: StoreAPIOrigin
          Compress: true
          CachePolicyId: !Ref CloudFrontCachePolicy
          ViewerProtocolPolicy: redirect-to-https
          # Add the necessary security headers to pass Mozilla Observatory
          # Missing Content-Security-Policy
          ResponseHeadersPolicyId:
            !FindInMap [
              CloudFront,
              ResponseHeadersPolicies,
              SecurityHeadersPolicy,
            ]
        PriceClass: PriceClass_100 # only use edge locations in North America, Europe, and Israel
        # Logging:
        #   Bucket: !GetAtt CloudFrontLoggingBucket.DomainName
        #   IncludeCookies: false
  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        MinTTL: 1
        DefaultTTL: 86400 # 1 day
        MaxTTL: 31536000 # 1 year
        Name: StoreMicroserviceCachePolicy
        ParametersInCacheKeyAndForwardedToOrigin:
          # Create separate cache keys for different query strings
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all
  # API Gateway
  HttpApi:
    # Creates AWS::ApiGatewayV2::Stage/Api
    # API Gateway v1 = REST, v2 = HTTP/WebSocket
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        # $context variables: https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-logging-variables.html
        Format: >-
          { "requestId":"$context.requestId", "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod",
          "routeKey":"$context.routeKey", "status":"$context.status",
          "protocol":"$context.protocol", "responseLength":"$context.responseLength" }
      DefaultRouteSettings:
        ThrottlingBurstLimit: 100 # max # of concurrent requests
        ThrottlingRateLimit: 100 # max # of requests/sec
      DefinitionUri: openapi.yaml # OpenAPI file URI
      #FailOnWarnings: true
  AccessLogs:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Metadata:
      guard:
        SuppressedRules:
          - CLOUDWATCH_LOG_GROUP_ENCRYPTED # server-side encryption is used by default
    Properties:
      LogGroupName: store-api
      RetentionInDays: 365
  # SQS
  LambdaDLQ:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 5
      SqsManagedSseEnabled: true
  # Lambda
  LambdaFunction:
    # Creates AWS::Lambda::Permission/Function, AWS::IAM::Role
    Type: AWS::Serverless::Function
    Metadata:
      guard:
        SuppressedRules:
          # Reliability suppressions
          - LAMBDA_CONCURRENCY_CHECK # save costs
          - LAMBDA_INSIDE_VPC # no VPC created (also security check)
          # Security suppressions
          - IAM_NO_INLINE_POLICY_CHECK # SAM policy templates become inline policies
    Properties:
      # Zip files run faster than container images (setting PackageType causes false drift)
      CodeUri: src/
      Handler: app.handler
      Runtime: python3.10 # see https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html
      Architectures:
        - arm64
      Description: Query the AWS Services table
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
      FunctionName: aws-service-handler
      Policies:
        # SAM policy templates:
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBReadPolicy:
            TableName: !Ref AWSServiceTable
      # Can use function URLs if API Gateway isn't necessary
      # 128 MB of memory allocated by default
      # Automatically update the runtime version
      # Timeout after 3 seconds
      Tracing: Active
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDLQ.Arn # automatically applies permissions to the execution role
        Type: SQS
  # DynamoDB
  AWSServiceTable:
    # SAM Version is limited
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        # Only need to list the sort and partition keys
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Name
          AttributeType: S
        - AttributeName: Price
          AttributeType: N
        - AttributeName: Category
          AttributeType: S
      BillingMode: PAY_PER_REQUEST # on-demand mode
      # GSIs are preferred over LSIs (unless strong consistency is required)
      # Query by price and category in addition to by name
      GlobalSecondaryIndexes:
        - IndexName: PriceIndex
          KeySchema:
            - AttributeName: Id
              KeyType: HASH # HASH = partition key, RANGE = sort key
            - AttributeName: Price
              KeyType: RANGE
          Projection:
            ProjectionType: ALL # project all keys to the index
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: Id
              KeyType: HASH
            - AttributeName: Category
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: Name
          KeyType: RANGE
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        # Back up table every second for 35 days (only charged based on table+index size)
        PointInTimeRecoveryEnabled: true
      TableClass: STANDARD
      TableName: AWS-Services
Outputs:
  CloudFrontURL:
    Description: CloudFront URL of the API
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
  HttpApiUrl:
    Description: URL of the API endpoint
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
  LambdaDLQURL:
    Description: DLQ URL for Lambda
    Value: !Ref LambdaDLQ
