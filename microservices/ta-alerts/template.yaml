AWSTemplateFormatVersion: "2010-09-09"
Description: Subscribe to errors and warnings from Trusted Advisor
Parameters:
  Email:
    Type: String
    Description: The email address that will receive SNS notifications for the TA alerts
    # Simple regex from https://stackoverflow.com/a/201378
    AllowedPattern: "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
Resources:
  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: USEast1AdvisorRule
      Description: Push Trusted Advisor notifications to an SNS topic
      EventPattern:
        source:
          - aws.trustedadvisor
        detail-type:
          - Trusted Advisor Check Item Refresh Notification
        detail:
          status:
            - ERROR
            - WARN
      State: ENABLED
      Targets:
        - Id: EmailTarget
          Arn: !Ref SNSTopic
          # Failed events are retried up to 185 times within 24 hours by default
          # This causes false drift detection :(
          # DeadLetterConfig:
          #   Arn: !GetAtt DLQ.Arn
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      # Encrypt using the default SNS SSE key
      # Key aliases: aws kms list-aliases
      KmsMasterKeyId: alias/aws/sns
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email
      TopicName: TrustedAdvisorNotifications
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          # Allow EventBridge to send email alerts using SNS
          - Sid: AllowEventBridgeServicePrincipalWriteOnly
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SNSTopic
            Condition:
              ArnEquals:
                "aws:SourceArn": !GetAtt EventBridgeRule.Arn
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action: sns:Publish
            Resource: !Ref SNSTopic
            Condition:
              Bool:
                "aws:SecureTransport": false
      Topics:
        - !Ref SNSTopic
  DLQ:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      # Defaults:
      # DelaySeconds (delay queue) = 0s (time before messages appear in the queue)
      # MessageRetentionPeriod = 4 days (345,600s) (time messages stays in the queue)
      # VisibilityTimeout = 30s (time before messages reappear in the queue)
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 5 # long polling if > 0
      SqsManagedSseEnabled: true
  DLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      # Allow EventBridge to send messages to the DLQ
      PolicyDocument:
        Statement:
          - Sid: AllowEventBridgeServicePrincipalWriteOnly
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt DLQ.Arn
            Condition:
              ArnEquals:
                "aws:SourceArn": !GetAtt EventBridgeRule.Arn
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action: "sqs:*"
            Resource: !GetAtt DLQ.Arn
            Condition:
              Bool:
                "aws:SecureTransport": false
      Queues:
        - !Ref DLQ
Outputs:
  DLQURL:
    Description: DLQ URL for EventBridge
    Value: !Ref DLQ
