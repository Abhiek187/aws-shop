AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
#Globals
Description: >-
  A stack that sends an email with details about an error detected by CloudWatch Logs
#Metadata
Parameters:
  Email:
    Type: String
    Description: The email address that will receive SNS notifications for the error logs
    # Simple regex from https://stackoverflow.com/a/201378
    AllowedPattern: "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
#Rules
#Mappings
#Conditions
Resources:
  LambdaFunction:
    # Creates AWS::Lambda::Permission/Function, AWS::IAM::Role
    Type: AWS::Serverless::Function
    Metadata:
      guard:
        SuppressedRules:
          # Reliability suppressions
          - LAMBDA_CONCURRENCY_CHECK # save costs
          - LAMBDA_INSIDE_VPC # no VPC created (also security check)
          # Security suppressions
          - IAM_NO_INLINE_POLICY_CHECK # SAM policy templates become inline policies
    Properties:
      # Zip files run faster than container images (setting PackageType causes false drift)
      CodeUri: src/
      Handler: app.handler
      Runtime: python3.12 # see https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html
      Architectures:
        - arm64
      Description: Send an email containing the logs from a CloudWatch subscription filter
      Events:
        LogEvent:
          # AWS::Logs::SubscriptionFilter
          Type: CloudWatchLogs
          Properties:
            FilterPattern: ?Error?
            LogGroupName: /aws/lambda/Your-Function-Here
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SNSTopic.TopicName
      # 128 MB of memory allocated by default
      # Automatically update the runtime version
      # Timeout after 3 seconds
      Environment:
        Variables:
          TopicArn: !Ref SNSTopic
      Tracing: Active
      DeadLetterQueue:
        TargetArn: !GetAtt LambdaDLQ.Arn # automatically applies permissions to the execution role
        Type: SQS
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      # Encrypt using the default SNS SSE key
      # Key aliases: aws kms list-aliases
      KmsMasterKeyId: alias/aws/sns
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action: sns:Publish
            Resource: !Ref SNSTopic
            Condition:
              Bool:
                "aws:SecureTransport": false
      Topics:
        - !Ref SNSTopic
  LambdaDLQ:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 5
      SqsManagedSseEnabled: true
Outputs:
  SNSTopicArn:
    Description: SNS Topic ARN
    Value: !Ref SNSTopic
  LambdaDLQURL:
    Description: DLQ URL for Lambda
    Value: !Ref LambdaDLQ
