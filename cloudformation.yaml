AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  A stack to host the frontend and configure the backend of the AWS Shopping App
#Metadata
Parameters:
  ReactAppBucketName:
    Type: String
    Description: The name of the S3 bucket to store the React code
    Default: aws-shop-bucket-jlkafn93hvo0a3f
#Rules
#Mappings
#Conditions
#Transform
Resources:
  # IAM users/roles
  # Frontend Developer
  # Backend Developer
  # Database Administrator
  AdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: Admins
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: Developers
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/job-function/SystemAdministrator
  DatabaseAdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: DatabaseAdmins
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/job-function/DatabaseAdministrator
  # Allow CodeBuild to upload objects to S3
  # https://docs.aws.amazon.com/codebuild/latest/userguide/setting-up.html#setting-up-service-role
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Sid: S3ObjectPolicy
                Effect: Allow
                Action:
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt ReactAppBucket.Arn
                  - !Sub "${ReactAppBucket.Arn}/*"
  # CodePipeline (or just CodeBuild for now)
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    # DependsOn: CodeBuildSourceCredential
    Properties:
      Name: AWSShopBuild
      Description: A project that builds and deploys the AWS Shopping App
      Source:
        Auth:
          Type: OAUTH
        # Directions to let GitHub authorize CodeBuild:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codebuild-project-source.html#cfn-codebuild-project-source-location
        Location: https://github.com/Abhiek187/aws-shop.git # not required if using CodePipeline
        Type: GITHUB
        ReportBuildStatus: true
      ServiceRole: !GetAtt CodeBuildRole.Arn
      # Upload the build to the S3 bucket
      Artifacts:
        Location: !Ref ReactAppBucketName
        Name: "/" # store the build in the root directory of the bucket (not zipped)
        Type: S3
        # Don't override S3's default SSE-S3 encryption with a KMS key
        # (will prevent the website from being accessible)
        EncryptionDisabled: true
      Environment:
        # Make sure the image supports the runtime in the buildspec:
        # https://docs.aws.amazon.com/codebuild/latest/userguide/available-runtimes.html
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0 # Amazon Linux 2 x86_64 image
        ComputeType: BUILD_GENERAL1_SMALL # free tier eligible
        EnvironmentVariables:
          - Name: CI
            Value: "true"
          - Name: ARTIFACT_BUCKET
            Value: !Ref ReactAppBucket
      BadgeEnabled: true # show a badge of the build status on GitHub, remove if using CodePipeline
      TimeoutInMinutes: 5 # important to limit build minutes/month (default: 60)
  # Get the PAT from Parameter Store to let CodeBuild authenticate with GitHub
  # ssm-secure only works with a limited number of resources:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#template-parameters-dynamic-patterns-resources
  # CodeBuildSourceCredential:
  #   Type: AWS::CodeBuild::SourceCredential
  #   Properties:
  #     Token: "{{resolve:ssm-secure:GitHubToken}}" # must be created outside CloudFormation
  #     ServerType: GITHUB
  #     AuthType: PERSONAL_ACCESS_TOKEN
  # CloudWatch
  # X-Ray
  ### Frontend ###
  # S3 bucket
  ReactAppBucket:
    Type: AWS::S3::Bucket
    # Can't delete an S3 bucket until all its objects are deleted
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Ref ReactAppBucketName
      # Buckets and objects are encrypted by default
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private # don't give public access to the S3 bucket directly
      # LoggingConfiguration:
      #   DestinationBucketName: !Ref LoggingBucket
      #   LogFilePrefix: testing-logs
      # Some access settings need to be enabled to add bucket policies
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
      # Save money by deleting older copies of objects
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersionsRule
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
  ReactAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReactAppBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Only allow CloudFront to access the S3 bucket
          # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html#create-oac-overview-s3
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action:
              - "s3:GetObject"
            Resource: !Sub "${ReactAppBucket.Arn}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution.Id}"
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action:
              - "s3:*"
            Resource:
              - !GetAtt ReactAppBucket.Arn
              - !Sub "${ReactAppBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": false
  # CloudFront
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt ReactAppBucket.DomainName
            Id: ReactAppS3Origin
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: true # required
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultRootObject: index.html
        DefaultCacheBehavior: # required
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: ReactAppS3Origin
          CachePolicyId: !Ref CloudFrontCachePolicy
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100 # only use edge locations in North America, Europe, and Israel
        # CustomErrorResponses:
        #   - ErrorCachingMinTTL: 300 # 5 minutes
        #     ErrorCode: 403
        #     ResponseCode: 404
        #     ResponsePagePath: error.html
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: AWS Shopping App Origin Access Control
        Name: ReactAppOAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        # TTL in seconds
        DefaultTTL: 86400 # 1 day
        MaxTTL: 31536000 # 1 year
        MinTTL: 86400
        Name: ReactAppCachePolicy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          # Brotli has better compression than gzip
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
  ### Backend ###
  # API Gateway
  # SQS
  # Lambda
  # DynamoDB
  # Parameter Store
  # CloudFormation doesn't support creating a SecureString parameter type
  # Cognito
Outputs:
  WebsiteURL:
    Description: URL for the website hosted on S3
    Value: !GetAtt ReactAppBucket.WebsiteURL
  CloudFrontURL:
    Description: The URL of the React app hosted over HTTPS using CloudFront
    Value: !Sub "https://${CloudFrontDistribution.DomainName}/"
