AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  A stack to host the frontend and configure the backend of the AWS Shopping App
#Metadata
Parameters:
  ReactAppBucketName:
    Type: String
    Description: The name of the S3 bucket to store the React code
    Default: aws-shop-bucket-jlkafn93hvo0a3f
  Email:
    Type: String
    Description: The email address that will receive SNS notifications for the health check alarm
    # Simple regex from https://stackoverflow.com/a/201378
    AllowedPattern: "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
#Rules
Mappings:
  CloudFront:
    # Managed cache policies: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
    CachePolicies:
      Amplify: 2e54312d-136d-493c-8eb9-b001f22f67d2
      CachingDisabled: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
      CachingOptimized: 658327ea-f89d-4fab-a63d-7e88639e58f6
      CachingOptimizedForUncompressedObjects: b2884449-e4de-46a7-ac36-70bc7f1ddd6d
      ElementalMediaPackage: 08627262-05a9-4f76-9ded-b50ca2e3a84f
    # Managed response policies: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-response-headers-policies.html
    ResponseHeadersPolicies:
      CORSAndSecurityHeadersPolicy: e61eb60c-9c35-4d20-a928-2b84e02af89c
      CORSWithPreflight: 5cc3b908-e619-4b99-88e5-2cf7f45965bd
      CORSWithPreflightAndSecurityHeadersPolicy: eaab4381-ed33-4a86-88ca-d9558dc6cd63
      SecurityHeadersPolicy: 67f7725c-6f97-4210-82d7-5512b31e9d03
      SimpleCORS: 60669652-455b-4ae9-85a4-c4c02393f86c
#Conditions
#Transform
Resources:
  # IAM users/roles
  # Frontend Developer
  # Backend Developer
  # Database Administrator
  AdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: Admins
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: Developers
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/job-function/SystemAdministrator
  DatabaseAdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: DatabaseAdmins
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/job-function/DatabaseAdministrator
  # Create an IdP for GitHub to use in workflows
  GitHubRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !Ref GitHubOIDC
            Condition:
              # aud = audience, sub = subject
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
              StringLike:
                token.actions.githubusercontent.com:sub: repo:Abhiek187/aws-shop:*
      ManagedPolicyArns:
        # A list of policies required for every workflow (max 10)
        # The shortest managed policies will move to a consolidated customer policy
        - !Ref GitHubRemainingPolicy
        # CloudFormation (need read access to detect drift & write access to update resources)
        - "arn:aws:iam::aws:policy/CloudFrontFullAccess" # 31
        - "arn:aws:iam::aws:policy/IAMFullAccess" # 22
        - "arn:aws:iam::aws:policy/AmazonRoute53FullAccess" # 31
        # React
        - "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess" # 133
        # Microservices
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess" # 108
        # SAM
        - "arn:aws:iam::aws:policy/AWSLambda_FullAccess" # 52
        - "arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess" # 83
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess" # 36
  GitHubRemainingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      guard:
        SuppressedRules:
          - IAM_POLICY_NO_STATEMENTS_WITH_FULL_ACCESS # need write access for CloudFormation
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AWSCloudFormationFullAccess
            Effect: Allow
            Action:
              - "cloudformation:*"
            Resource: "*"
          - Sid: AmazonSNSFullAccess
            Effect: Allow
            Action:
              - "sns:*"
            Resource: "*"
          - Sid: AmazonS3FullAccess
            Effect: Allow
            Action:
              - "s3:*"
              - "s3-object-lambda:*"
            Resource: "*"
          - Sid: AmazonAPIGatewayAdministrator
            Effect: Allow
            Action:
              - "apigateway:*"
            Resource: "arn:aws:apigateway:*::/*"
          - Sid: AmazonSQSFullAccess
            Effect: Allow
            Action:
              - "sqs:*"
            Resource: "*"
  GitHubOIDC:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1
        - 1c58a3a8518e8759bf075b76b750d4f2df264fcd
  # Allow CodeBuild to upload objects to S3
  # https://docs.aws.amazon.com/codebuild/latest/userguide/setting-up.html#setting-up-service-role
  CodeBuildPolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      guard:
        SuppressedRules:
          # The same suppressed rule must be defined here due to a bug with cfn-guard:
          # https://github.com/aws-cloudformation/aws-guard-rules-registry/issues/246
          - IAM_POLICY_NO_STATEMENTS_WITH_FULL_ACCESS
    Properties:
      ManagedPolicyName: CodeBuildAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
          - Sid: S3ObjectPolicy
            Effect: Allow
            Action:
              - "s3:DeleteObject"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:PutObject"
            Resource:
              - !GetAtt ReactAppBucket.Arn
              - !Sub "${ReactAppBucket.Arn}/*"
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      ManagedPolicyArns:
        - !Ref CodeBuildPolicy
  # CodePipeline (or just CodeBuild for now)
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    # DependsOn: CodeBuildSourceCredential
    Properties:
      Name: AWSShopBuild
      Description: A project that builds and deploys the AWS Shopping App
      Source:
        Auth:
          Type: OAUTH
        # Directions to let GitHub authorize CodeBuild:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codebuild-project-source.html#cfn-codebuild-project-source-location
        Location: https://github.com/Abhiek187/aws-shop.git # not required if using CodePipeline
        Type: GITHUB
        ReportBuildStatus: true
      ServiceRole: !GetAtt CodeBuildRole.Arn
      # Upload the build to the S3 bucket
      Artifacts:
        Location: !Ref ReactAppBucketName
        Name: "/" # store the build in the root directory of the bucket (not zipped)
        Type: S3
        # Don't override S3's default SSE-S3 encryption with a KMS key
        # (will prevent the website from being accessible)
        EncryptionDisabled: true
      Environment:
        # Make sure the image supports the runtime in the buildspec:
        # https://docs.aws.amazon.com/codebuild/latest/userguide/available-runtimes.html
        Type: ARM_CONTAINER
        Image: aws/codebuild/amazonlinux2-aarch64-standard:3.0 # Amazon Linux 2 ARM image
        ComputeType: BUILD_GENERAL1_SMALL # free tier eligible
        EnvironmentVariables:
          - Name: CI
            Value: "true"
          - Name: ARTIFACT_BUCKET
            Value: !Ref ReactAppBucket
      BadgeEnabled: true # show a badge of the build status on GitHub, remove if using CodePipeline
      TimeoutInMinutes: 5 # important to limit build minutes/month (default: 60)
  # Get the PAT from Parameter Store to let CodeBuild authenticate with GitHub
  # ssm-secure only works with a limited number of resources:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#template-parameters-dynamic-patterns-resources
  # CodeBuildSourceCredential:
  #   Type: AWS::CodeBuild::SourceCredential
  #   Properties:
  #     Token: "{{resolve:ssm-secure:GitHubToken}}" # must be created outside CloudFormation
  #     ServerType: GITHUB
  #     AuthType: PERSONAL_ACCESS_TOKEN
  ### Frontend ###
  # S3 bucket
  ReactAppBucket:
    Type: AWS::S3::Bucket
    Metadata:
      guard:
        SuppressedRules:
          # Reliability suppressions
          - S3_BUCKET_REPLICATION_ENABLED # stay within 435 MB
          - S3_BUCKET_DEFAULT_LOCK_ENABLED # objects can be overwritten regularly
    # Can't delete an S3 bucket until all its objects are deleted
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Ref ReactAppBucketName
      # Buckets and objects are encrypted by default
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private # don't give public access to the S3 bucket directly
      LoggingConfiguration:
        DestinationBucketName: !Ref S3LoggingBucket
        LogFilePrefix: !Ref ReactAppBucketName
      # Some access settings need to be enabled to add bucket policies
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true # set to false when creating a bucket policy
        IgnorePublicAcls: true
        RestrictPublicBuckets: true # set to false when creating a bucket policy
      VersioningConfiguration:
        Status: Enabled
      # Save money by deleting older copies of objects
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersionsRule
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
  ReactAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Metadata:
      guard:
        SuppressedRules:
          - S3_BUCKET_SSL_REQUESTS_ONLY # Resource: "*" isn't valid
    Properties:
      Bucket: !Ref ReactAppBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Only allow CloudFront to access the S3 bucket
          # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html#create-oac-overview-s3
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${ReactAppBucket.Arn}/*"
            Condition:
              ArnEquals:
                "aws:SourceArn": !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution.Id}"
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt ReactAppBucket.Arn
              - !Sub "${ReactAppBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": false
  S3LoggingBucket:
    Type: AWS::S3::Bucket
    Metadata:
      guard:
        SuppressedRules:
          # Reliability suppressions
          - S3_BUCKET_REPLICATION_ENABLED # stay within 435 MB
          # Security suppressions
          - S3_BUCKET_LOGGING_ENABLED # this is a logging bucket
    # Can't delete an S3 bucket until all its objects are deleted
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      # Save money by deleting older copies of objects
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersionsRule
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
      # Enable WORM (write once, read many)
      ObjectLockEnabled: true
      ObjectLockConfiguration:
        ObjectLockEnabled: Enabled
        Rule:
          DefaultRetention:
            Mode: GOVERNANCE # more lax than compliance mode
            Days: 30
  CloudFrontLoggingBucket:
    Type: AWS::S3::Bucket
    Metadata:
      guard:
        SuppressedRules:
          # Reliability suppressions
          - S3_BUCKET_REPLICATION_ENABLED # stay within 435 MB
          # Security suppressions
          - S3_BUCKET_LOGGING_ENABLED # this is a logging bucket
    # Can't delete an S3 bucket until all its objects are deleted
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      # ACLs must be enabled for CloudFront logs
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      # Save money by deleting older copies of objects
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersionsRule
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
      # Enable WORM (write once, read many)
      ObjectLockEnabled: true
      ObjectLockConfiguration:
        ObjectLockEnabled: Enabled
        Rule:
          DefaultRetention:
            Mode: GOVERNANCE # more lax than compliance mode
            Days: 30
  # CloudFront
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt ReactAppBucket.DomainName
            Id: ReactAppS3Origin
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: true # required
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultRootObject: index.html
        DefaultCacheBehavior: # required
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: ReactAppS3Origin
          # TTL: min = 1s, default = 1d, max = 1y; brotli+gzip compression
          # No cookies, headers (except Accept-Encoding), or queries in the cache key
          CachePolicyId:
            !FindInMap [CloudFront, CachePolicies, CachingOptimized]
          ViewerProtocolPolicy: redirect-to-https
          # Add the necessary security headers to pass Mozilla Observatory
          # Missing Content-Security-Policy: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"
          ResponseHeadersPolicyId:
            !FindInMap [
              CloudFront,
              ResponseHeadersPolicies,
              SecurityHeadersPolicy,
            ]
        PriceClass: PriceClass_100 # only use edge locations in North America, Europe, and Israel
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300 # 5 minutes
            # Redirect 403 errors (forbidden) to a 404 page (not found)
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /index.html
        # Logging:
        #   Bucket: !GetAtt CloudFrontLoggingBucket.DomainName
        #   IncludeCookies: false
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: AWS Shopping App Origin Access Control
        Name: ReactAppOAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  # Route 53
  # HealthCheck:
  #   Type: AWS::Route53::HealthCheck
  #   Properties:
  #     HealthCheckConfig:
  #       # 3 health checks every 30s by default
  #       # Optional features: HTTPS, STR_MATCH, RequestInterval < 30, MeasureLatency
  #       Type: HTTP
  #       FullyQualifiedDomainName: !GetAtt CloudFrontDistribution.DomainName
  #       Port: 80
  #       ResourcePath: /
  # # CloudWatch
  # HealthCheckAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmDescription: Check the health of the AWS Shop site and send an email whenever it's unhealthy
  #     # In Route 53, monitor the health check status in the past 5 minutes (either 0 or 1).
  #     # If this unitless value is < 1 at any point, transition to an ALARM state.
  #     # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html
  #     Namespace: AWS/Route53
  #     MetricName: HealthCheckStatus
  #     Dimensions:
  #       - Name: HealthCheckId
  #         Value: !Ref HealthCheck
  #     Period: 300 # 5 minutes
  #     EvaluationPeriods: 1
  #     Statistic: Minimum
  #     ComparisonOperator: LessThanThreshold
  #     Threshold: 1
  #     Unit: None
  #     AlarmActions:
  #       - !Ref SNSTopic
  # SNS
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      # Encrypt using the default SNS SSE key
      # Key aliases: aws kms list-aliases
      KmsMasterKeyId: alias/aws/sns
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email
  # X-Ray
  ### Backend ###
  # API Gateway
  # SQS
  # Lambda
  # DynamoDB
  # Parameter Store
  # CloudFormation doesn't support creating a SecureString parameter type
  # Cognito
Outputs:
  WebsiteURL:
    Description: URL for the website hosted on S3
    Value: !GetAtt ReactAppBucket.WebsiteURL
  CloudFrontURL:
    Description: The URL of the React app hosted over HTTPS using CloudFront
    Value: !Sub "https://${CloudFrontDistribution.DomainName}/"
  GitHubRoleArn:
    Value: !GetAtt GitHubRole.Arn
